SELECT EMPLOYEE_ID
	 , EMAIL
	 , PHONE_NUMBER 
  FROM EMPLOYEES
;

SELECT DEPARTMENT_ID
	 , DEPARTMENT_NAME 
	 , MANAGER_ID 
	 , LOCATION_ID 
  FROM DEPARTMENTS
 WHERE MANAGER_ID = 103
 ORDER BY LOCATION_ID ASC 
 	 , MANAGER_ID DESC 
;

SELECT FIRST_NAME
	 , LAST_NAME 
  FROM EMPLOYEES
 WHERE MANAGER_ID = 103
 ORDER BY FIRST_NAME 
;

SELECT LAST_NAME 
  FROM EMPLOYEES
 WHERE FIRST_NAME = 'Steven'
 ORDER BY LAST_NAME DESC 
;

SELECT CITY 
  FROM LOCATIONS
 WHERE COUNTRY_ID = 'US'
 ORDER BY CITY
;

SELECT EMPLOYEE_ID 
	 , FIRST_NAME 
	 , SALARY 
  FROM EMPLOYEES
 WHERE SALARY >= 10000
   AND SALARY <= 15000 
 ORDER BY SALARY DESC
;

SELECT EMPLOYEE_ID
	 , FIRST_NAME 
	 , MANAGER_ID 
	 , COMMISSION_PCT 
  FROM EMPLOYEES
 WHERE COMMISSION_PCT IS NULL
   AND MANAGER_ID = 100
 ORDER BY EMPLOYEE_ID 
;

SELECT *
  FROM EMPLOYEES
 WHERE (JOB_ID = 'FI_MGR'
    OR JOB_ID = 'ST_MAN')
   AND SALARY <= 10000
 ORDER BY HIRE_DATE
;

SELECT *
  FROM EMPLOYEES
 WHERE (FIRST_NAME = 'Bruce'
    OR LAST_NAME = 'Chen')
   AND JOB_ID = 'FI_ACCOUNT'
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID != 'FI_ACCOUNT'
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID IN ('FI_MGR', 'ST_MAN')
   AND SALARY <= 10000
 ORDER BY HIRE_DATE 
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID NOT IN ('FI_MGR', 'ST_MAN')
   AND SALARY <= 10000
 ORDER BY HIRE_DATE
;

SELECT *
  FROM EMPLOYEES
  WHERE FIRST_NAME LIKE 'S%'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '%n'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '%eve%'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '%Ste%'
;

SELECT *
  FROM EMPLOYEES
 WHERE PHONE_NUMBER LIKE '515.%'
 ORDER BY FIRST_NAME DESC
;

SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID LIKE '%PRES'
 ORDER BY LAST_NAME 
;

SELECT DEPARTMENT_ID
	 , DEPARTMENT_NAME
	 , LOCATION_ID
  FROM DEPARTMENTS
 WHERE DEPARTMENT_NAME LIKE '%i%'
 	OR DEPARTMENT_NAME LIKE '%I%'
 ORDER BY LOCATION_ID DESC
;

SELECT DEPARTMENT_NAME 
  FROM DEPARTMENTS
 WHERE DEPARTMENT_NAME NOT LIKE '%IT%'
 ORDER BY DEPARTMENT_NAME DESC
;

SELECT DEPARTMENT_NAME 
  FROM DEPARTMENTS
 WHERE DEPARTMENT_NAME LIKE '%Co%'
   AND DEPARTMENT_NAME NOT LIKE '%T%'
;

SELECT *
  FROM EMPLOYEES 
 WHERE FIRST_NAME LIKE '___'
;

SELECT *
  FROM EMPLOYEES
 WHERE FIRST_NAME LIKE '____d%'
;

SELECT *
  FROM EMPLOYEES
 WHERE LAST_NAME LIKE '_e%'
;

SELECT JOB_ID
	 , COUNT(1)
  FROM EMPLOYEES
 GROUP BY JOB_ID 
;

SELECT DEPARTMENT_ID
	 , COUNT(1) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT SUM(SALARY)
  FROM EMPLOYEES
;

SELECT DEPARTMENT_ID
     , SUM(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT JOB_ID
	 , SUM(SALARY) 
  FROM EMPLOYEES
 GROUP BY JOB_ID
;

SELECT DEPARTMENT_ID
	 , JOB_ID
	 , SUM(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
  	 , JOB_ID
;

SELECT DEPARTMENT_ID
	 , MAX(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT JOB_ID
	 , MIN(SALARY) 
  FROM EMPLOYEES
 GROUP BY JOB_ID
;

SELECT DEPARTMENT_ID
	 , JOB_ID
	 , MAX(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
 	 , JOB_ID
;

SELECT MAX(SALARY)
	 , MIN(SALARY)
	 , AVG(SALARY)
	 , SUM(SALARY) 
  FROM EMPLOYEES
;

SELECT DEPARTMENT_ID
	 , COUNT(1)
	 , MAX(SALARY)
	 , MIN(SALARY)
	 , AVG(SALARY)
	 , SUM(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
;

SELECT MANAGER_ID
	 , COUNT(1)
	 , MAX(SALARY)
	 , MIN(SALARY)
	 , AVG(SALARY)
	 , SUM(SALARY) 
  FROM EMPLOYEES
 GROUP BY MANAGER_ID 
;

SELECT DEPARTMENT_ID
	 , MAX(SALARY)
	 , MIN(SALARY)
	 , AVG(SALARY) 
  FROM EMPLOYEES
 WHERE JOB_ID != 'SA_REP'
 GROUP BY DEPARTMENT_ID
;

SELECT DEPARTMENT_ID
	 , COUNT(1) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
HAVING COUNT(1) > 0
;

SELECT MANAGER_ID
	 , COUNT(1) 
  FROM EMPLOYEES
 GROUP BY MANAGER_ID
HAVING COUNT(1) >= 2
;

SELECT JOB_ID
	 , AVG(SALARY)
	 , MAX(SALARY)
	 , MIN(SALARY)
  FROM EMPLOYEES
 GROUP BY JOB_ID
HAVING AVG(SALARY) >= 7000
;

SELECT DEPARTMENT_ID
	 , COUNT(1)
	 , AVG(SALARY)
	 , MAX(SALARY)
	 , MIN(SALARY) 
  FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
HAVING COUNT(1) >= 3
   AND AVG(SALARY) >= 5000
;

/* 최저 연봉보다 많이 받는 사원들의 모든 정보 조회 */
SELECT *
  FROM EMPLOYEES
 WHERE SALARY > (SELECT MIN(SALARY)
 				   FROM EMPLOYEES)
;

/* 평균 연봉보다 많이 받는 사원들의 모든 정보 조회 */
SELECT *
  FROM EMPLOYEES
 WHERE SALARY > (SELECT AVG(SALARY)
 				   FROM EMPLOYEES)
;

/*
 * EMPLOYEES 테이블에서 
 * FIRST_NAME = 'Steven'
 * LAST_NAME = 'King'
 * 을 MANAGER_ID로 두고있는 모든 데이터 조회 
 */
SELECT *
  FROM EMPLOYEES
 WHERE MANAGER_ID = (SELECT EMPLOYEE_ID  
 					   FROM EMPLOYEES
 					  WHERE FIRST_NAME = 'Steven'
 					    AND LAST_NAME = 'King')
;

/*
 * EMPLOYEES 테이블에서 EMPLOYEE_ID가 102번인 사원의 연봉과
 * 동일한 연봉을 받는 모든 사원의 정보를 조회한다.
 * 단, 102번은 조회에서 제외한다
 */

SELECT *
  FROM EMPLOYEES
 WHERE SALARY = (SELECT SALARY
 				   FROM EMPLOYEES
 				  WHERE EMPLOYEE_ID = 102)
   AND EMPLOYEE_ID != 102
;

/*
 * EMPLOYEES 테이블에서 EMPLOYEE_ID가 113번과 동일한 DEPARTMENT_ID를 가지는 모든 사원의 정보 출력
 * 단, 113번은 조회에서 제외
 */
SELECT *
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
 						  FROM EMPLOYEES
 					     WHERE EMPLOYEE_ID = 113)
   AND EMPLOYEE_ID != 113
;
 
/*
 * EMPLOYEES 테이블에서 EMPLOYEE_ID가 115번인 데이터의 JOB_ID와 같은 JOB_ID를 가진 데이터를 모두 조회한다.
 * 단, 115번은 조회에서 제외한다.
 */
SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID = (SELECT JOB_ID
 				   FROM EMPLOYEES
 				  WHERE EMPLOYEE_ID = 115)
   AND EMPLOYEE_ID != 115
;

/*
 * EMPLOYEES 테이블에서 FIRST_NAME이 J로 시작하는 데이터의 JOB_ID와 같은 JOB_ID를 가진 데이터 모두 조회
 */
SELECT *
  FROM EMPLOYEES
 WHERE JOB_ID IN (SELECT JOB_ID
 				    FROM EMPLOYEES
 				   WHERE FIRST_NAME LIKE 'J%')
;

/*
 * EMPLOYEES 테이블에서 EMPLOYEE_ID가 116번, 201번의 데이터의 SALARY와 같은 SALARY를 가진 데이터 모두 조회
 * 단, 116번, 201번은 조회에서 제외
 */

SELECT *
  FROM EMPLOYEES
 WHERE SALARY IN (SELECT SALARY
 				    FROM EMPLOYEES
 				   WHERE EMPLOYEE_ID IN (116, 201))
   AND EMPLOYEE_ID NOT IN (116, 201)
; 

/*
 * EMPLOYEES 테이블에서 EMPLOYEE_ID가 103번, 206번, 115번인 데이터의 MANAGER_ID와 같은 MANAGER_ID를 가진 데이터 모두 조회
 * 단, 103번, 206번, 115번 조회 제외
 */
SELECT *
  FROM EMPLOYEES
 WHERE MANAGER_ID IN (SELECT MANAGER_ID
 						FROM EMPLOYEES
 					   WHERE EMPLOYEE_ID IN (103, 206, 115))
   AND EMPLOYEE_ID NOT IN (103, 206, 115)
;

/*
 * IT부서에서 일하는 사원의 이름과 성을 조회한다
 */
SELECT FIRST_NAME
	 , LAST_NAME 
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID 
 						  FROM DEPARTMENTS
 						 WHERE DEPARTMENT_NAME = 'IT')
;

/*
 * 직무명이 'Programmer'인 사원의 이메일을 조회
 */
SELECT EMAIL 
  FROM EMPLOYEES
 WHERE JOB_ID = (SELECT JOB_ID
 				   FROM JOBS
 				  WHERE JOB_TITLE = 'Programmer')
;

/*
 * 'Beijing'도시에 있는 부서명 조회
 */
SELECT DEPARTMENT_NAME
  FROM DEPARTMENTS
 WHERE LOCATION_ID = (SELECT LOCATION_ID
 						FROM LOCATIONS
 					   WHERE CITY = 'Beijing')
;

/*
 * 'Canada'에 있는 모든 도시명을 조회
 */
SELECT CITY
  FROM LOCATIONS
 WHERE COUNTRY_ID = (SELECT COUNTRY_ID
 					   FROM COUNTRIES
 					  WHERE COUNTRY_NAME = 'Canada')
;


/*
 * 'United Stated of America'국가에 있는 모든 부서명과 부서번호 조회
 */

SELECT DEPARTMENT_NAME
	 , DEPARTMENT_ID 
  FROM DEPARTMENTS
 WHERE LOCATION_ID IN (SELECT LOCATION_ID
 						 FROM LOCATIONS
 					    WHERE COUNTRY_ID = (SELECT COUNTRY_ID
 					   					      FROM COUNTRIES
 						   					 WHERE COUNTRY_NAME = 'United States of America'))
;

/*
 * EMPLOYEES와 DEPARTMENTS를 조인한 결과를 모두 조회
 */
SELECT *
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
;

/*
 * IT 부서에서 일하는 모든 사원들의 이름과 부서장 번호를 조회한다.
 */
SELECT EMP.FIRST_NAME 
	 , DEP.MANAGER_ID 
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP 
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 WHERE DEP.DEPARTMENT_NAME = 'IT'
;

/*
 * 'Seattle'에 존재하는 부서명과 우편번호 조회
 */
SELECT DEP.DEPARTMENT_NAME
     , LOC.POSTAL_CODE 
  FROM DEPARTMENTS DEP
 INNER JOIN LOCATIONS LOC
    ON DEP.LOCATION_ID = LOC.LOCATION_ID
 WHERE CITY = 'Seattle'
;

/*
 * 145번 사원이 부서장으로 근무하는 부서에 있는 사원들의 이름과 부서명을 조회
 */
SELECT EMP.FIRST_NAME 
	 , DEP.DEPARTMENT_NAME 
  FROM EMPLOYEES EMP
 INNER JOIN DEPARTMENTS DEP
    ON EMP.DEPARTMENT_ID = DEP.DEPARTMENT_ID
 WHERE DEP.MANAGER_ID = 145
;

/*
 * 직무아이디가 'ST_CLERK'인 사원의 이름, 성, 직무명, 최저연봉을 조회
 */
SELECT E.FIRST_NAME
     , E.LAST_NAME
     , J.JOB_TITLE
     , J.MIN_SALARY 
  FROM EMPLOYEES E
 INNER JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
 WHERE J.JOB_ID = 'ST_CLERK'
;

/*
 * 100번 부사장이 근무하는 부서명, 도시명, 우편번호 조회
 */
SELECT D.DEPARTMENT_NAME 
     , L.CITY 
     , L.POSTAL_CODE 
  FROM DEPARTMENTS D
 INNER JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
 WHERE D.MANAGER_ID = 100
;

/*
 * 국가아이디가 'CN'인 주, 도시, 주소와 국가명 조회 
 */
SELECT L.STATE_PROVINCE 
	 , L.CITY
	 , L.STREET_ADDRESS
	 , C.COUNTRY_NAME 
  FROM COUNTRIES C
 INNER JOIN LOCATIONS L
    ON C.COUNTRY_ID = L.COUNTRY_ID
 WHERE C.COUNTRY_ID = 'CN'
;

/*
 * 도시, 부서명, 이름, 성을 조회
 */
SELECT L.CITY
	 , D.DEPARTMENT_NAME
	 , E.FIRST_NAME
	 , E.LAST_NAME 
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN LOCATIONS L 
    ON D.LOCATION_ID = L.LOCATION_ID
;

/*
 * 'Canada'에 근무하는 사원의 이름과 부서명을 조회
 */

SELECT E.FIRST_NAME
	 , D.DEPARTMENT_NAME 
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
 INNER JOIN LOCATIONS L 
    ON D.LOCATION_ID = L.LOCATION_ID
 INNER JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
 WHERE C.COUNTRY_NAME = 'Canada'

/*
 * 'SA_REP' 직무인 사원의 이름, 성, 연봉, 부서명, 직무명을 조회
 */
SELECT E.FIRST_NAME
     , E.LAST_NAME
     , E.SALARY
     , D.DEPARTMENT_NAME
     , J.JOB_TITLE 
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
 WHERE J.JOB_ID = 'SA_REP'
;

/*
 * 'MK_REP' 직무였던 사원의 이름, 성, 연봉, 부서명, 현재 직무명을 조회
 */
SELECT E.FIRST_NAME
     , E.LAST_NAME
     , E.SALARY
     , D.DEPARTMENT_NAME
     , J.JOB_TITLE
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN JOB_HISTORY JH
    ON E.EMPLOYEE_ID = JH.EMPLOYEE_ID
 INNER JOIN JOBS J
    ON J.JOB_ID = E.JOB_ID 
 WHERE JH.JOB_ID = 'MK_REP'
;

/*
 * 'New Jersey' 주에서 근무중인 사원의 이름, 부서명, 연봉을 조회
 */
SELECT E.FIRST_NAME
     , D.DEPARTMENT_NAME
     , E.SALARY 
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
 WHERE L.STATE_PROVINCE = 'New Jersey'
;

/*
 * 'C'로 시작하는 도시에서 근무중인 사원의 이름, 부서명, 직무명, 도시명을 조회
 */
SELECT E.FIRST_NAME
     , D.DEPARTMENT_NAME
     , J.JOB_TITLE
     , L.CITY 
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
 INNER JOIN LOCATIONS L 
    ON D.LOCATION_ID = L.LOCATION_ID
 WHERE L.CITY LIKE 'C%'
;

/*
 * 우편번호에 '7' 이 포함된 도시에서 근무중인 사원들의 사원번호, 직무명을 조회
 */
SELECT E.EMPLOYEE_ID
     , J.JOB_TITLE
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
 INNER JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
 WHERE L.POSTAL_CODE LIKE '%7%'
;

/*
 * 회사 전체 평균연봉보다 많은 연봉을 받는 사원들의 이름과 부서명을 조회
 */
SELECT E.FIRST_NAME
     , D.DEPARTMENT_NAME
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 WHERE SALARY > (SELECT AVG(SALARY)
 				   FROM EMPLOYEES)
;

/*
 * Asia에 근무중인 사원들의 사원번호, 이름, 성, 부서명, 직무명, 도시명 조회
 */
SELECT E.EMPLOYEE_ID
	 , E.FIRST_NAME
	 , E.LAST_NAME
	 , D.DEPARTMENT_ID
	 , J.JOB_TITLE
	 , L.CITY
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN JOBS J
    ON J.JOB_ID = E.JOB_ID
 INNER JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
 INNER JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
 INNER JOIN REGIONS R
    ON C.REGION_ID = R.REGION_ID
 WHERE R.REGION_NAME ='Asia'
;

/*
 * 사원의 이름과 부서명을 조회
 * 부서에 포함되어있거나 포함되지 않은 사원도 모두 조회
 */
SELECT E.FIRST_NAME
     , D.DEPARTMENT_NAME 
  FROM EMPLOYEES E
  LEFT OUTER JOIN DEPARTMENTS D 
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
;

/*
 * 모든 도시에 위치한 부서를 조회
 * 도시, 부서명
 * 도시별 부서의 개수
 */
SELECT L.CITY
     , D.DEPARTMENT_NAME
  FROM LOCATIONS L
  LEFT OUTER JOIN DEPARTMENTS D
    ON L.LOCATION_ID = D.LOCATION_ID
;

/*
 * 모든 도시의 도시별 부서 개수 조회
 */
SELECT L.CITY 
     , COUNT(D.DEPARTMENT_ID)
  FROM LOCATIONS L
  LEFT OUTER JOIN DEPARTMENTS D
    ON L.LOCATION_ID = D.LOCATION_ID
 GROUP BY L.CITY
;

/*
 * 국가별 지역의 개수를 조회
 */
SELECT C.COUNTRY_NAME 
     , COUNT(L.LOCATION_ID)
  FROM COUNTRIES C
  LEFT OUTER JOIN LOCATIONS L 
    ON C.COUNTRY_ID = L.COUNTRY_ID 
 GROUP BY C.COUNTRY_NAME 
;

/*
 * 직무별 사원의 수를 조회
 */
SELECT J.JOB_TITLE
	 , COUNT(1)
  FROM JOBS J
  LEFT OUTER JOIN EMPLOYEES E
    ON J.JOB_ID = E.JOB_ID
 GROUP BY J.JOB_TITLE

 /*
  * 직무별 사원의 수 조회
  * 단, 사원의 수가 5명 이상인 직무만 조회
  */
SELECT J.JOB_TITLE
	 , COUNT(1)
  FROM JOBS J
  LEFT OUTER JOIN EMPLOYEES E 
    ON J.JOB_ID = E.JOB_ID
 GROUP BY J.JOB_TITLE
 HAVING COUNT(1) >= 5
;

/*
 * 사원이 단 한 명도 없는 부서명 조회
 */
SELECT D.DEPARTMENT_NAME 
  FROM DEPARTMENTS D
  LEFT OUTER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_NAME
HAVING COUNT(E.EMPLOYEE_ID) = 0
;

/*
 * 대륙별 지역의 수 조회
 */

SELECT R.REGION_NAME
	 , COUNT(L.LOCATION_ID)
  FROM REGIONS R
  LEFT OUTER JOIN COUNTRIES C 
   ON R.REGION_ID = C.REGION_ID
  LEFT OUTER JOIN LOCATIONS L 
   ON C.COUNTRY_ID = L.COUNTRY_ID
GROUP BY R.REGION_NAME  
 

/*
 * 지역별 사원의 수를 조회
 */
SELECT L.CITY  
     , COUNT(E.EMPLOYEE_ID)
  FROM LOCATIONS L
  LEFT OUTER JOIN DEPARTMENTS D 
    ON L.LOCATION_ID = D.LOCATION_ID
  LEFT OUTER JOIN EMPLOYEES E 
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID 
 GROUP BY L.CITY  

/*
 * 2005년에 입사한 사원들의 부서명과 이름을 조회
 */
SELECT D.DEPARTMENT_NAME 
	 , EMP_2005.FIRST_NAME
  FROM (SELECT FIRST_NAME
  			 , DEPARTMENT_ID
  		  FROM EMPLOYEES
  		 WHERE HIRE_DATE BETWEEN TO_DATE('2005-01-01', 'YYYY-MM-DD') AND TO_DATE('2005-12-31', 'YYYY-MM-DD')) EMP_2005
 INNER JOIN DEPARTMENTS D 
    ON EMP_2005.DEPARTMENT_ID = D.DEPARTMENT_ID
;
  	
/*
 * 연봉을 많이 받는 사람들 중 상위 10명의 이름과 부서명을 조회
 */ 
SELECT SO.FIRST_NAME
	 , D.DEPARTMENT_ID 
  FROM (SELECT DEPARTMENT_ID
  			 , FIRST_NAME
  		  FROM EMPLOYEES
 		 ORDER BY SALARY DESC) SO
 INNER JOIN DEPARTMENTS D 
    ON SO.DEPARTMENT_ID = D.DEPARTMENT_ID 
 WHERE ROWNUM <= 10
;

/*
 * 이름으로 내림차순 정렬된 데이터 중 상위 20개의 사원번호, 이름, 부서명을 조회
 */
SELECT EO.EMPLOYEE_ID
	 , EO.FIRST_NAME
	 , D.DEPARTMENT_NAME
  FROM (SELECT EMPLOYEE_ID 
  			 , FIRST_NAME
  			 , DEPARTMENT_ID
          FROM EMPLOYEES
         ORDER BY FIRST_NAME DESC) EO
 INNER JOIN DEPARTMENTS D
    ON EO.DEPARTMENT_ID = D.DEPARTMENT_ID
 WHERE ROWNUM <= 20
;

/*
 * 사원 수가 가장 많은 부서의 사원명, 부서명을 조회
 */
-- 사원 수가 가장 많은 부서 (사원 수 정렬)
-- 그 중 1개 부서 조회
SELECT E.FIRST_NAME 
	 , D.DEPARTMENT_NAME 
  FROM (SELECT DEPARTMENT_ID
		  FROM (SELECT COUNT(1) AS CNT
			   	     , DEPARTMENT_ID 
		  		  FROM EMPLOYEES
		 		 GROUP BY DEPARTMENT_ID
		 		 ORDER BY CNT DESC)
		 WHERE ROWNUM = 1) EC
 INNER JOIN DEPARTMENTS D 
    ON EC.DEPARTMENT_ID = D.DEPARTMENT_ID
 INNER JOIN EMPLOYEES E 
 	ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
;

-- 서브쿼리로 풀기
SELECT E.FIRST_NAME 
	 , D.DEPARTMENT_NAME 
  FROM DEPARTMENTS D
 INNER JOIN EMPLOYEES E
    ON D.DEPARTMENT_ID = E.DEPARTMENT_ID 
 WHERE D.DEPARTMENT_ID = (SELECT DEPARTMENT_ID 
 						    FROM (SELECT COUNT(1) AS CNT
			   	  		       	       , DEPARTMENT_ID 
		  		 		    	    FROM EMPLOYEES
							 	   GROUP BY DEPARTMENT_ID
						 		   ORDER BY CNT DESC)
		 				   WHERE ROWNUM = 1)


/* 부서별 평균 연봉보다 많이 받는 부서별 사원들의 연봉 조회 */
SELECT EMPLOYEE_ID
	 , DEPARTMENT_ID
	 , SALARY
  FROM EMPLOYEES E
 WHERE SALARY > (SELECT AVG(SALARY)
 				   FROM EMPLOYEES E2
 				  WHERE E.DEPARTMENT_ID = E2.DEPARTMENT_ID)
;



/*
 * 과제: 
 * 이름으로 오름차순 정렬된 데이터 중 상위 30개와
 * 부서명으로 내림차순 정렬된 데이터 중 상위 5개를 조인해
 * 이름, 부서명, 직무명을 조회
 */
-- 1. 이름으로 오름차순 정렬된 데이터 중 상위 30개

SELECT *
  FROM (SELECT FIRST_NAME 
  			 , DEPARTMENT_ID
		  FROM EMPLOYEES
		 ORDER BY FIRST_NAME)
 WHERE ROWNUM <= 30
; 
-- 2. 부서명으로 내림차순 정렬된 데이터 중 상위 5개
SELECT *
  FROM (SELECT DEPARTMENT_NAME
  			 , DEPARTMENT_ID
  		  FROM DEPARTMENTS
  		 ORDER BY DEPARTMENT_NAME DESC)
 WHERE ROWNUM <= 5
;
-- 1, 2 JOIN -> INNER JOIN으로 부서명 내림차순 정렬 상위 5개에 포함된 사원만 조회(23명)
-- SELECT에 * 대신 column명 -> 복잡한 쿼리에서 한 눈에 파악

SELECT E.FIRST_NAME
	 , D.DEPARTMENT_NAME
	 , J.JOB_TITLE
  FROM (SELECT *
		  FROM (SELECT FIRST_NAME 
		  			 , DEPARTMENT_ID
		  			 , JOB_ID
				  FROM EMPLOYEES
				 ORDER BY FIRST_NAME) 
		 WHERE ROWNUM <= 30) E
  INNER JOIN (SELECT *
 			    FROM (SELECT DEPARTMENT_NAME
 			               , DEPARTMENT_ID
	    	  	        FROM DEPARTMENTS
			        ORDER BY DEPARTMENT_NAME DESC)
	 			WHERE ROWNUM <= 5) D
     ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  INNER JOIN JOBS J
  	 ON J.JOB_ID = E.JOB_ID
;

/*
 * 1. 부서장 정보 조회 (부서장의 부서명, 사원번호 조회)
 */
-- CASE 1. Scala Query
-- 부서정보 테이블에서 부서장 번호 조회
SELECT MANAGER_ID 
     , DEPARTMENT_NAME
     , (SELECT FIRST_NAME
          FROM EMPLOYEES
         WHERE EMPLOYEE_ID = DEP.MANAGER_ID) AS FIRST_NAME
     , (SELECT LAST_NAME 
          FROM EMPLOYEES
         WHERE EMPLOYEE_ID = DEP.MANAGER_ID) LAST_NAME
  FROM DEPARTMENTS DEP
 WHERE MANAGER_ID IS NOT NULL
;

--FIRST_NAME과 LAST_NAME을 이어 하나의 COLUMN으로 만들기
SELECT MANAGER_ID 
     , DEPARTMENT_NAME 
     , (SELECT FIRST_NAME || ' ' || LAST_NAME
     	  FROM EMPLOYEES
     	 WHERE EMPLOYEE_ID = DEP.MANAGER_ID) NAME
  FROM DEPARTMENTS DEP
 WHERE MANAGER_ID IS NOT NULL
;

-- CASE 2. JOIN
SELECT D.DEPARTMENT_NAME 
     , E.FIRST_NAME
     , E.LAST_NAME 
  FROM EMPLOYEES E
 INNER JOIN DEPARTMENTS D 
    ON E.EMPLOYEE_ID = D.MANAGER_ID 
;

/*
 * 2. 재귀조인 (사원들의 상사 조회)
 *  부하직원의 사원번호, 이름, 성, 상사의 사원번호, 이름 성 조회
 */
-- CASE 1. Saclar Query
SELECT EMP.EMPLOYEE_ID
     , EMP.FIRST_NAME 
     , EMP.LAST_NAME 
     , (SELECT EMPLOYEE_ID 
          FROM EMPLOYEES
         WHERE EMPLOYEE_ID = EMP.MANAGER_ID) MANAGER_ID 
     , (SELECT FIRST_NAME
     	  FROM EMPLOYEES
     	 WHERE EMPLOYEE_ID = EMP.MANAGER_ID) MANAGER_FIRST_NAME
     , (SELECT LAST_NAME
     	  FROM EMPLOYEES
     	 WHERE EMPLOYEE_ID = EMP.MANAGER_ID) MANAGER_LAST_NAME
  FROM EMPLOYEES EMP
 WHERE MANAGER_ID IS NOT NULL 
 ORDER BY EMPLOYEE_ID 
; 
 
-- CASE2. JOIN
SELECT EMP.EMPLOYEE_ID 
     , EMP.FIRST_NAME 
     , EMP.LAST_NAME 
     , MAN.EMPLOYEE_ID MANAGER_ID
     , MAN.FIRST_NAME MANAGER_FIRST_NAME
     , MAN.LAST_NAME MANAGER_LAST_NAME
  FROM EMPLOYEES EMP -- 부하직원
 INNER JOIN EMPLOYEES MAN -- 상사
    ON EMP.MANAGER_ID = MAN.EMPLOYEE_ID -- 부하직원의 MANAGER_ID는 상사의 EMPLOYEE_ID와 같다
 ORDER BY EMPLOYEE_ID 
;

/*
 *  3. 계층쿼리
 */
 SELECT LEVEL
 	  , EMPLOYEE_ID
 	  , FIRST_NAME 
 	  , LAST_NAME 
 	  , MANAGER_ID 
   FROM EMPLOYEES 
  START WITH MANAGER_ID IS NULL
CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID 
;

-- 3-2. 113번 사원의 모든 상사를 조회
 SELECT LEVEL
      , EMPLOYEE_ID 
      , FIRST_NAME 
      , LAST_NAME 
      , MANAGER_ID 
   FROM EMPLOYEES
  START WITH EMPLOYEE_ID = 113
CONNECT BY PRIOR MANAGER_ID = EMPLOYEE_ID 
  ORDER BY LEVEL DESC
;

/*
 * CASE 5. (NOT) EXIST
 */
-- 부하 직원이 없는 말단 사원만 조회 -> 내 사원번호가 누군가의 MANAGER_ID인지 아닌지 조회
-- 1. NOT EXIST
SELECT *
  FROM EMPLOYEES E1
 WHERE NOT EXISTS (SELECT 1
 				     FROM EMPLOYEES E2
 				    WHERE E2.MANAGER_ID = E1.EMPLOYEE_ID)
;

-- 2. EXIST
SELECT *
  FROM EMPLOYEES E1
 WHERE E1.EMPLOYEE_ID NOT IN (SELECT MANAGER_ID
 		    					FROM EMPLOYEES E2
 		    				   WHERE E2.MANAGER_ID = E1.EMPLOYEE_ID) -- 데이터가 존재하지 않는 것 (NOT IN)과 EMPLOYEE_ID 비교
;

-- 부하 직원이 있는 사원만 조회
SELECT *
  FROM EMPLOYEES E1
 WHERE EXISTS (SELECT 1
 				 FROM EMPLOYEES E2
 				WHERE E2.MANAGER_ID = E1.EMPLOYEE_ID)
;

-- 2. EXIST
SELECT *
  FROM EMPLOYEES E1
 WHERE E1.EMPLOYEE_ID IN (SELECT DISTINCT MANAGER_ID
 		    			    FROM EMPLOYEES E2)
;

/*
 *  CASE 7. DECODE
 */ 
-- AD_PRES -> AP
-- AD_VP -> AV
-- IT_PROG -> IP
-- FI_MGR -> FM
-- FI_ACCOUNT -> FA
-- PU_MAN -> PM
-- 다 아니면 '-'
-- 으로 변환하여 조회

-- JOB_ID, MIN_JOB_ID
SELECT JOB_ID
     , DECODE(JOB_ID
            , 'AD_PRES', 'AP'
            , 'AD_VP', 'AV'
            , 'IT_PROG', 'IP'
            , 'FI_MGR', 'FM'
            , 'FI_ACCOUNT', 'FA'
            , 'PU_MAN', 'PM'
            , '-') AS MIN_JOB_ID
  FROM EMPLOYEES 
;

-- JOB_ID의 자리수가 4라면 ' FOUR'
-- 5라면 'FIVE'
-- 6이라면 'SIX'
-- 그 외 '-'
SELECT JOB_ID
     , LENGTH(JOB_ID)
     , DECODE (LENGTH(JOB_ID)
     	    , 4, 'FOUR'
     	    , 5, 'FIVE'
     	    , 6, 'SIX'
     	    , '-') LEN
  FROM EMPLOYEES
;

/*
 *  8. CASE
 */
SELECT JOB_ID
     , CASE JOB_ID
     	  WHEN 'AD_PRES' THEN 
     	     'AP'
     	  WHEN 'AD_VP' THEN 
     	     'AV'
     	  ELSE 
     	     '-'
     	  END MIN_JOB_ID
  FROM EMPLOYEES 
;


-- 연봉이 평균연봉보다 많이 받으면 "고액연봉"
-- 연봉이 평균연봉보다 적게 받으면 "저연봉"
-- 둘 다 아니면, "평균연봉"
-- 으로 조회
SELECT SALARY 
     , CASE 
       	 WHEN SALARY > (SELECT AVG(SALARY)
     	 				   FROM EMPLOYEES) THEN
     	    '고액연봉'
     	 WHEN SALARY < (SELECT AVG(SALARY)
     	 				   FROM EMPLOYEES) THEN
     	    '저연봉'
     	 ELSE 
     	    '평균연봉'
         END SALARY_TYPE
  FROM EMPLOYEES 
 GROUP BY SALARY 
;

/*
 *  9. NVL
 */
-- 상사가 없는 경우 "-"로 출력
-- NVL
SELECT EMPLOYEE_ID 
     , MANAGER_ID
     , NVL (MANAGER_ID, -1)
     , NVL (TO_CHAR(MANAGER_ID), '-') IS_MANAGER
  FROM EMPLOYEES
;

-- CASE
SELECT EMPLOYEE_ID 
     , MANAGER_ID 
     , CASE
         WHEN MANAGER_ID IS NULL THEN
         	'-'
         ELSE
         	TO_CHAR(MANAGER_ID)
       END NVL_MANAGER_ID
  FROM EMPLOYEES
;

/*
 *  10. LPAD
 */
SELECT LPAD (EMPLOYEE_ID, 10, 'B')
  FROM EMPLOYEES 
;

/*
 * 11. RPAD
*/
SELECT RPAD (EMPLOYEE_ID, 10, 'A')
  FROM EMPLOYEES 
;

/*
 *  12. TO_CHAR
 */
SELECT HIRE_DATE
	 , TO_CHAR(HIRE_DATE)
	 , TO_CHAR(HIRE_DATE, 'YYYY/MM/DD HH:MI:SS')
	 , TO_CHAR(HIRE_DATE, 'YYYY/MM/DD HH24:MI:SS')
	 , TO_CHAR(HIRE_DATE, 'YYYY-MM-DD')
	 , TO_CHAR(HIRE_DATE, 'HH24')
  FROM EMPLOYEES 
;

/*
 *  13. TO_DATE
 */
SELECT '20230220162457'
     , TO_DATE('20230220162457', 'YYYY-MM-DD HH24:MI:SS')
  FROM DUAL
;
/*
 *  14. SUBSTR
 */
SELECT FIRST_NAME
     , SUBSTR(FIRST_NAME, 0, 2)
     , SUBSTR(FIRST_NAME, 4, 2)
     , SUBSTR(FIRST_NAME, 6, 2) 
  FROM EMPLOYEES 
;  
/*
 *  15. LENGTH
 */
SELECT FIRST_NAME
     , LENGTH (FIRST_NAME)
  FROM EMPLOYEES 
;

/*
 *  16. LTRIM
 */
SELECT '    ABC    '
     , LTRIM ('    ABC    ')
  FROM DUAL
;

/*
 *  17. RTRIM
 */
SELECT '    ABC    '
     , RTRIM ('    ABC    ')
  FROM DUAL
;

/*
 *  18. TRIM
 */
SELECT '    ABC    '
     , TRIM ('    ABC    ')
  FROM DUAL
;

/*
 *  19. ADD_MONTHS
 */
SELECT ADD_MONTHS(SYSDATE, 1) "한 달 후"
  	 , ADD_MONTHS(SYSDATE, 2) "두 달 후"
  	 , ADD_MONTHS(SYSDATE, -1) "한 달 전"
  	 , ADD_MONTHS(SYSDATE, -2) "두 달 전"
  	 , ADD_MONTHS(SYSDATE, -12) "1년 전"
  	 , ADD_MONTHS(SYSDATE, 12) "1년 후"
  FROM DUAL
;

-- 입사일자에서 하루 씩 뺀 날짜를 조회
SELECT HIRE_DATE
     , HIRE_DATE - 1 YESTERDAY
 FROM EMPLOYEES 


/*
 *  20. SYSDATE
 */
SELECT SYSDATE "현재날짜"
	 , SYSDATE -1 "하루 전"
	 , SYSDATE -2 "이틀 전"
	 , SYSDATE +1 "하루 후"
	 , SYSDATE +2 "이틀 후"
	 , SYSDATE - (1/24/60) "1분 전"
	 , SYSDATE - (5/24/60) "5분 전"
	 , SYSDATE - (1/24) "1시간 전"
	 , SYSDATE - (5/24) "5시간 전"
  FROM DUAL
;




